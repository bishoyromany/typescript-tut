(()=>{"use strict";var e,t,o,n={430:function(e,t){var o,n=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=new(function(e){function t(t,o){var n=e.call(this,t)||this;return n.position=o,n}return n(t,e),t.prototype.positionTasks=function(){console.log("Hello "+this.firstName+", Your Position Is "+this.position+", So Your Tasks Is Developing Websites.")},t}(function(){function e(e){this.fullName=e;var t=e.split(" ");this.firstName=t[0],this.lastName=t.length>1?t[1]:null}return e.prototype.greet=function(){console.log("Good Morning "+this.firstName)},e}()))("Bishoy Romany","Web Developer");console.log("Classes"),console.table({classData:e,fullName:e.fullName}),e.greet(),e.positionTasks()}},692:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e;console.log("Methods"),console.table({age:(30,10,3600),fullName:(e={firstName:"Bishoy",lastName:"Romany"},e.firstName+" "+(e.lastName?e.lastName:""))})}},735:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e;console.warn("Basic Types."),console.table({name:"Name",names:["Name1","Name2"],age:10,ages:[1,2],namesAges:["Name1",2],unlimitedNamesAges:["Name1",10,20,"Name2"],isUser:!0,verifyDate:null,country:void 0,multipleTypes:"Could Be String Or Number"}),function(e){e.Frontend="Frontend Web Developer",e.Backend="Backend Web Developer"}(e||(e={}));var t=e.Frontend;console.warn("More Advanced Types."),console.table({frontend:t,randomArray:["String",1,!0,null,void 0],unknownVar:"String"})}}},r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e].call(o.exports,o,o.exports,s),o.exports}e=s(735),t=s(692),o=s(430),e.default(),t.default(),o.default()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,